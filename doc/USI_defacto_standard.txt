USIプロトコルとは

USI(Universal Shogi Interface)プロトコルとは、将棋GUIソフトと思考エンジ
ンが通信をするために、Tord Romstad氏によって考案された通信プロトコルです。
USIの原案は、以下で読むことができます。

The Universal Shogi Interface, draft 1

このページの文章は、原案の直訳ではなく、説明の仕方を適度に変更しています。
また、前置きの部分や、将棋所で未対応のコマンドについて説明を省略していま
す。一方、コマンドのやり取りの方法など、全体の流れについて原文では具体例
が少なくてわかりにくいと思うので、その部分については説明を増やしています。
わからないところがあったら、実際に将棋所でサンプルエンジンのLesserkaiを
動かして、デバッグウィンドウのログを見ると参考になると思います。

将棋所の作成にあたり、原案のままでは不足している部分があったので、その点
については新しいコマンドを追加しました。そのため、このページで解説してい
る内容を、USIの正式な定義ということにします。（何をもってUSIの正式な定義
とするかはっきりしていないのですが、ここ以外でUSIについて議論している人
もいないと思うので、このページの内容が正式版であるとして構わないと思いま
す。原案を考案したTord氏も、その後、コンピュータ将棋に関しては何もやって
いないようですし。）既に実装済みのコマンド部分を変更することはありません
ので、エンジン作者は安心してUSIに対応して下さい。USIプロトコル全般におけ
る注意GUIとエンジン間の通信のやり取りは、標準入出力を通してテキストのコ
マンドで行われます。 エンジンは常に（たとえ思考中であっても）コマンドの
受信ができる必要があります。 コマンドの送受信をするとき、その文字は半角
英数字を使用します。 コマンドとオプションなどの間は半角スペースで区切っ
て下さい。 エンジンがコマンドの行を送信する場合、最後に必ず改行コード（
\n）を追加する必要があります。改行コードがないと、GUIは行の終わりを認識
できません。 USIコマンドでは半角英数字しか使えないため、そのままではエン
ジン設定ダイアログでのオプション名などを日本語で表示できません。そのため、
日本語変換用ファイルを使用することによって日本語表示ができるようにしまし
た。詳しくは「エンジン設定ダイアログで日本語を表示する方法」を見て下さい。
SFENによる盤面と指し手の表記について

USIで使用される、SFEN(Shogi Forsyth-Edwards Notation)表記法による局面と
指し手の表記を解説します。この表記方法は、後述するpositionコマンドや
bestmoveコマンド、さらにinfoコマンドなどで使用されます。

駒の種類は、それぞれ１文字のアルファベットで表され、先手の駒は大文字、後
手の駒は小文字になります。

先手の玉  ：K、後手の玉  ：k （Kingの頭文字）
先手の飛車：R、後手の飛車：r （Rookの頭文字）
先手の角  ：B、後手の角  ：b （Bishopの頭文字）
先手の金  ：G、後手の金  ：g （Goldの頭文字）
先手の銀  ：S、後手の銀  ：s （Silverの頭文字）
先手の桂馬：N、後手の桂馬：n （kNightより）
先手の香車：L、後手の香車：l （Lanceの頭文字）
先手の歩  ：P、後手の歩  ：p （Pawnの頭文字）

駒が成った状態を表記するには、駒の文字の前に+をつけます。先手のと金は+P
となります。

盤面を表記するとき、１段目の左側（９筋側）から駒の種類を書いていきます。
空白の升は、空白が続く個数の数字を書きます。

平手初期局面の場合、１段目は、左から後手の駒が香桂銀金玉金銀桂香と並んで
いるので、lnsgkgsnlとなります。２段目は、空白が１升、後手の飛車、空白が
５升、後手の角、空白が１升というように並んでいるので、1r5b1となります。

各段がそのように表記され、１段目から９段目まで、それぞれの段の表記を/
（半角スラッシュ）でつなげて書くと、盤面の表記になります。平手初期局面で
あれば

lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL

ということになります。

しかし局面表記にはこれだけでは不十分で、次の手番と、持ち駒についても表記
する必要があります。

次の手番については、先手番ならb、後手番ならwと表記します。（Black、White
の頭文字）

持ち駒については、先手後手のそれぞれの持ち駒の種類と、その枚数を表記しま
す。枚数は、２枚以上であれば、駒の種類の前にその数字を表記します。先手側
が銀１枚歩２枚、後手側が角１枚歩３枚であれば、S2Pb3pと表記されます。どち
らも持ち駒がないときは-（半角ハイフン）を表記します。

さらにSFENの原案によると、次の手が何手目かという数字も表記する必要があり
ます。ただし、任意局面から開始する場合など、次の手が何手目かという情報に
意味がないので、これが必要なものかどうかよくわかりません。将棋所の場合、
この数字は必ず１にしています。

以上によりSFENによる任意局面の表記方法が定義されます。香落ち初期局面であ
れば、

lnsgkgsn1/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1

というように表記されます。

次に、指し手の表記について解説します。筋に関しては１から９までの数字で表
記され、段に関してはaからiまでのアルファベット（１段目がa、２段目が
b、・・・、９段目がi）というように表記されます。位置の表記は、この２つを
組み合わせます。５一なら5a、１九なら1iとなります。

そして、指し手に関しては、駒の移動元の位置と移動先の位置を並べて書きます。
７七の駒が７六に移動したのであれば、7g7fと表記します。（駒の種類を表記す
る必要はありません。）

駒が成るときは、最後に+を追加します。８八の駒が２二に移動して成るなら
8h2b+と表記します。

持ち駒を打つときは、最初に駒の種類を大文字で書き、それに*を追加し、さら
に打った場所を追加します。金を５二に打つ場合はG*5bとなりますGUIからエン
ジンに送られるコマンド

usi

    GUIがエンジンを起動した時に最初に送るコマンドです。エンジンは、この
    コマンドを受信したらすぐにidコマンドを返し、必要に応じてoptionコマン
    ドを返します。そして最後にusiokコマンドを返す必要があります。

isready

    対局開始前に送ります。エンジンは対局準備ができたらreadyokを返すこと
    になります。

setoption name <id> [value <x>]

    エンジンに対して値を設定する時に送ります。
    <id>で指定する名前は、エンジンが起動時にoptionコマンドで返した名前に
    なります。value <x>で指定する部分は、文字列であればその文字列を入れ、
    チェックボックスのブーリアン値であればtrueまたはfalseになります。

    将棋所2.8.0からは、エンジン設定ダイアログでOKを押したときの設定内容
    を将棋所の側で保存して、対局開始時に同じ内容をsetoptionで送るように
    なりました。そのため、エンジンがsetoptionの内容を初期設定ファイルに
    保存する機能は不要になりました。

    また、USI_PonderとUSI_Hashに関しては、それぞれ対局ダイアログの「相手
    の手番中に先読み」と「ハッシュ」に対応しており、将棋所で対局を開始す
    るときに必ず送るので、エンジンがoptionコマンドで指定する必要はありま
    せん。以下に具体例を示します。

        // オプション名USI_Ponderの値をtrueに設定
        setoption name USI_Ponder value true
        // オプション名USI_Hashの値を32に設定
        setoption name USI_Hash value 32

usinewgame

    対局開始時に送ります。これで対局開始になります。

position [sfen <sfenstring> | startpos ] moves <move1> ... <movei>

    思考開始局面をエンジンに知らせるためのコマンドです。エンジンに思考を
    開始させる場合、positionコマンドで思考開始局面を送り、それに続けてgo
    コマンドを送って思考開始を命令することになります。

    positionコマンドの書式として、まず初期局面を記述し、それに続けて初期
    局面からの全ての手を記述します。

    初期局面の部分については、平手初期局面であれば単にstartposと書き、そ
    うでなければsfenに続けてSFENの書式に基づいて記述します。

    それに続く指し手の部分は、初期局面に続けてmovesを書き、さらに初手か
    らの全ての手を並べて書きます。

    例えば、平手初期局面から▲７六歩、△３四歩、▲２六歩と進んだ局面であ
    れば、

        position startpos moves 7g7f 3c3d 2g2f

    となります。２枚落ち初期局面から△６二玉、▲７六歩、△３二銀と進んだ
    局面であれば、

        position sfen lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1 moves 5a6b 7g7f 3a3b

    となります。このように、毎回毎回、初期局面からの全ての指し手を書く必
    要があるので、冗長に思われるかもしれません。しかし、この方式を採用す
    ることにより、エンジンは先読み機能への対応が簡単にできるようになりま
    す。また、この方式に対応した時点で、待ったの機能が自動的に実装済みに
    なります。

go

    思考開始の合図です。エンジンはこれを受信すると思考を開始します。
    自分の手番の時に思考を開始することを通常思考と呼びます。相手の手番の
    時に思考を開始することを先読み思考と呼びます。後述しますが、go 
    ponderによって思考を開始するときは先読み思考、ponderがついていないgo
    コマンドで思考を開始するときは通常思考となります。
    以下に、goコマンドのオプションについて解説します。

    ponder

        これを使うときは、必ずgo ponderというように、goのすぐあとに
        ponderを書くことになります。

        ponderという言葉は、辞書では「熟考」と訳されていますが、思考ゲー
        ムにおいては、相手の手番中に次の手を考える「先読み」を意味します。

        go ponderは、先読みを開始する合図となります。（先読みを開始すべ
        き局面は、この前にpositionコマンドによって送られてきています。）
        エンジンは、go ponderによって思考を開始する場合、GUI側から次のコ
        マンド（stopまたはponderhit）が送られてくる前にbestmoveで指し手
        を返してはいけません。（たとえ、思考開始の時点で詰んでいるような
        場合であったとしてもです。）相手が手を指すと、それによってstopま
        たはponderhitが送られて来るので、それを待ってからbestmoveで指し
        手を返すことになります。（この辺の流れついては、後述する「対局に
        おける通信の具体例」を読んで下さい。）

    btime, wtime <x>

        先手と後手の残り時間を表示します。（btimeは先手の残り時間、wtime
        は後手の残り時間。）単位はミリ秒です。

    byoyomi <x>

        これはUSIの原案にはありませんが、将棋特有の秒読みに対応するため
        に追加しました。単位はミリ秒です。先手と後手で秒読みの時間が違う
        ということは想定していないので、どちらにも共通の値となります。

        btime, wtime, byoyomiを使って、残り時間と秒読み時間を指定するこ
        とができます。先手の残り時間が６０秒、後手の残り時間が５０秒、秒
        読みが１０秒であれば、

            go btime 60000 wtime 50000 byoyomi 10000

        というようになります。

    infinite

        時間無制限で思考させる場合に使います。（将棋所では、検討機能で制
        限時間を無制限にした時にgo inifiniteを送ります。）

        エンジンはgo infiniteで思考を開始した場合、次にstopが送られてく
        る前にbestmoveを返してはいけません。stopが送られてきた時に
        bestmoveを返すことになります。

    mate [<x> | infinite]

        詰将棋解答を開始する時に使います。この時、制限時間を指定すること
        ができます。単位はミリ秒です。制限時間１分で解かせるのであれば、

            go mate 60000

        となります。また、時間無制限で解かせるのであれば、次のように
        infiniteを使います。

            go mate infinite

        エンジンは、go mateによって思考を開始した場合、checkmateコマンド
        を返すことになります。詰将棋解答に対応していないならcheckmate
        notimplementedを返すようにして下さい。

        なお、USIの原案では、go mateのパラメータとして手数を指定すること
        になっていて、go mate 9と指定すれば、９手以内に詰みがあるかどう
        か探索することになっています。しかし、チェスと違って将棋での詰手
        数というのは非常に長くなることがあり、詰将棋を解かせる時に「何手
        以内に詰みがあるかどうか」という使い方はほとんどしないので、手数
        の代わりに制限時間を指定するように変更しました。

stop

    エンジンに対し思考停止を命令するコマンドです。エンジンはこれを受
    信したら、できるだけすぐ思考を中断し、bestmoveで指し手を返す必要
    があります。（現時点で最善と考えている手を返すようにして下さい。）

    stopは通常思考と先読み思考のいずれの場合にも送られる可能性があり
    ます。通常思考では、人間対エンジンでエンジンの思考中に「急」（す
    ぐ指させる）ボタンを押した場合と、検討を中断した場合に送ります。
    先読み思考ではエンジンの予想手が外れた場合に送ります。

ponderhit

    エンジンが先読み中、前回のbestmoveコマンドでエンジンが予想した通りの
    手を相手が指した時に送ります。エンジンはこれを受信すると、先読み思考
    から通常の思考に切り替わることになり、任意の時点でbestmoveで指し手を
    返すことができます。

quit

    アプリケーション終了を命令するコマンドです。エンジンはこれを受信した
    らすぐに終了する必要があります。

gameover [ win | lose | draw ]

    gameoverというコマンドはUSIの原案にはありませんが、これがないと対局
    終了をエンジンに知らせることができないために追加しました。gameoverの
    あと、エンジンの結果に応じてwin, lose, drawのいずれかのパラメータも
    一緒に送られます。

    エンジンはgameoverを受信したら対局状態を終了して、対局待ち状態になり
    ます。その後、isready及びusinewgameを受信すると次の対局開始というこ
    とになります。


エンジンからGUIに送られるコマンド

id name <program name>
id author <program author>

    usiコマンドを受信した時に最初に送り返すコマンドです。この時、id name
    でプログラム名を返し、id authorで作者名を返します。将棋所でエンジン
    を追加する場合、このid nameで返した名前を登録するので、必ず送り返す
    必要があります。

usiok

    usiコマンドを受信した時に最後に送り返すコマンドです。将棋所ではこれ
    を返さないエンジンはUSIエンジンと認識されず登録できないので、必ず送
    り返す必要があります。将棋所の場合、usiを送ってから５秒以内にusiokが
    返ってこないとタイムアウトしてしまうので、起動時にあまり時間のかかる
    処理をさせないように注意して下さい。

readyok

    isreadyコマンドを受信した時、対局準備ができたらreadyokを返して下さい。
    対局前に時間のかかる処理をする場合など、isreadyを受信してからreadyok
    を返す間にやるといいと思います。

bestmove <move1> [ponder <move2>]

    エンジンの指し手を返します。<move1>の部分にエンジンの指し手を記述し
    ます。

    単に指し手を返すのであれば、bestmoveのあとにエンジンの指し手だけを追
    加し、ponderは追加しないようにします。エンジンが7g7fと指し、その後の先読
    みをしないのであれば、

        bestmove 7g7f

    となります。

    指し手を返したあと、先読み機能を使いたいのであれば、自分の指し手のあ
    と、ponder <move2>の部分に、エンジンが予想した相手の指し手を追加しま
    す。これがGUIに対する先読み要求になります。例えば、エンジンが8h2b+と
    指すとして、それに対する相手の指し手を3a2bと予想し、その局面からの先
    読みを要求するのであれば、

        bestmove 8h2b+ ponder 3a2b

    となります。この後、GUI側から、相手が3a2bと指した局面がpositionコマ
    ンドによって送られてきて、それに続けてgo ponderが送られてくるので、
    その時点から先読みを開始します。

    このように、USIプロトコルにおいて、エンジンの先読みは、

    エンジン側からbestmove <move1> ponder <move2>による先読み要求
    ↓
    GUI側からpositionコマンドで先読み思考開始局面の送信
    ↓
    GUI側からgo ponderコマンドが送られ先読み開始

    という一連の流れに沿って行われます。この方式に従うことにより、先読み
    の実装が容易になります。また、エンジンの先読み時の予想手が将棋所の
    「予想手」の欄に表示され、先読み中の思考内容もinfoコマンドを使えば通
    常思考時と同様にGUIで表示できるようになります。

    なお、先読みをする時に、予想手を一つではなく複数考えたいということが
    あるかもしれません。そのような場合は、USIの本来の使い方からは外れま
    すが、bestmove <move1> ponder <move2>ではなく、単にbestmove <move1>
    だけを返し、相手の手番中に勝手に先読みするようにして下さい。

    エンジンの投了について

    USIの原案では、エンジンが投了する方法が用意されていません。しかし、
    エンジン側の判断で投了できないというのはどう考えてもおかしな話なので、
    投了する方法を追加しました。

        bestmove resign

    を送ることによって、GUIに投了を伝えることができます。GUIはこれを受信
    すると対局状態を終了し、gameoverコマンドをエンジンに送ります。

    また、エンジンは、相手の指し手によって詰まされてしまった場合は必ず
    bestmove resignを返すようにして下さい。

    入玉勝ち宣言について

    入玉して勝ちと判断した時、エンジンは入玉勝ち宣言をすることができます。
    このための方法を追加しました。

        bestmove win

    を送ることによって、GUIに入玉勝ち宣言を伝えることができます。

    GUIはこれを受信すると、通信対局であれば、通信相手に%KACHIコマンドを
    送ります。人間対エンジン、またはエンジン対エンジンであれば、その宣言
    が正しいかどうか、GUIが判断して勝敗を決めます。

    入玉勝ち宣言が正しいかどうかは、CSAルールでの定義に基づくものとしま
    す。それ以外のルール（２４点法など）は使用しません。

info

    エンジンは、goコマンドで思考を開始してからbestmoveコマンドで指し手を
    返すまでの間、infoコマンドによって思考中の情報を返すことができます。
    infoコマンドはいくつかのサブコマンドで構成されます。以下に、そのサブ
    コマンドについて解説します。

    また、サブコマンドは１行にまとめて書くことができます。（ただし、pvと
    stringの同時使用は不可。）

    depth <x>

        現在思考中の手の（基本の）探索深さを返します。

    seldepth <x>

        現在、選択的に読んでいる手の探索深さを返します。seldepthを使うと
        きは、必ずその前でdepthを使って基本深さを示す必要があります。基
        本深さが５で、選択的に読んだ手の深さが８であれば、

            depth 5 seldepth 8

        というように続けて書くことになります。

    time <x>

        思考を開始してから経過した時間を返します（単位はミリ秒）。これは
        pvと一緒に返す必要があります。

    nodes <x>

        思考開始から探索したノード数を返します。これは定期的に返す必要が
        あります。

    pv <move1> ... <movei>

        現在の読み筋を返します。（pvというのは、principal variationの略
        です。）pvのあと、指し手を続けて書くことになります。なお、pvを使
        う場合、infoのあとに書くサブコマンドの中で最後に書くようにして下
        さい。stringとの同時使用はできません。

    score cp <x>
    score mate <y>

        エンジンによる現在の評価値を返します。score cpで評価値を返す場合、
        歩１枚の価値を100とした値を返すことになります。（cpというのは、
        centi pawnの略です。）この値は、エンジンの側から見た値となり、エ
        ンジンが有利ならプラス、エンジンが不利ならマイナスの値になります。
        エンジンが50点有利と判断しているならscore cp 50となります。

        エンジンが詰みを発見した場合は、score mateによって詰み手数を返す
        ことができます。詰み手数に入れる数字は、エンジンの勝ちならプラス、
        エンジンの負けならマイナスになります。エンジンが6手後に詰まされ
        て負けると判断した場合はscore mate -6となります。

        ただし、「詰みを発見したが、手数がわからない」ということがあるか
        もしれません。（実は、サンプル用のエンジンであるLesserkaiが詰み
        を発見したときがこの状況になります。）こういう場合は、score mate +
        またはscore mate - のように、数字を使わず、単に+または-の記号を
        使用するようにして下さい。（これはUSIの原案にはありませんが、将
        棋所で機能追加しています。）

    currmove <move>

        現在思考中の手を返します。（思考開始局面から最初に指す手です。）

    hashfull <x>

        エンジンが現在使用しているハッシュの使用率を返します。単位はパー
        ミル（全体を１０００とした値）になります。現在のハッシュ使用率が
        ２０％であれば、hashfull 200となります。
        このコマンドは定期的に返す必要があります。

    nps <x>

        １秒あたりの探索局面数を返します。これは定期的に返す必要があります。

    string <str>

        GUIに表示させたい任意の文字列を返します。GUIはstringサブコマンド
        以降の文字列を全てそのまま表示します。将棋所の場合、この文字列は
        「読み筋」の欄に表示します。そのためpvと同時使用はできません。

    これらのサブコマンドは次の例のように１行に並べて書くことができます。
    実際の使い方としては、pvを返すときに、time、depth、nodes、scoreなど
    をまとめて返すとよいでしょう。

    また、定期的に返す必要のある、nodes、nps、hashfullなどもまとめて返す
    とよいと思います。（定期的に返す場合、あまり頻繁だと無駄なので、少な
    くとも１秒は間隔をおくようにして下さい。）

    info time 1141 depth 3 nodes 135125 score cp -1521 pv 3a3b L*4h 4c4d
    info nodes 120000 nps 116391 hashfull 104
    info string 7g7f (70%)

option

    エンジン固有の設定値を送ります。このコマンドは、GUIからusiが送られて
    きたあと、idとusiokを送り返す間に送ることになります。GUIはこれによっ
    て送られた内容を読み取り、エンジン設定ダイアログで表示することができ
    ます。エンジン設定ダイアログでOKを押すと、設定した内容をsetoptionコ
    マンドでエンジンに送ることになります。optionコマンドは以下の書式にな
    ります。

    option name <optionname> type <optiontype> <parameter...>

    optionnameにオプション名を入れ、optiontypeにオプションの種類を入れま
    す。optionnameにはスペースを入れてはいけません。

    オプション名については、USIによって予約されているものがいくつかあり
    ます。そのうち、USI_HashとUSI_Ponderについては、将棋所で対局を開始す
    るときに必ずsetoptionコマンドで値を送るようにしているので、エンジン
    側で独自に値を保存する必要はありません。この２つのオプションについて
    解説します。

    <id> = USI_Hash, type spin

        エンジンのハッシュメモリの量を指定します。単位はMBになります。

    <id> = USI_Ponder, type check 

        エンジンが先読み機能を使用できるかどうか指定します。これでfalse
        を指定すると、エンジンは先読み機能を使うことはできません。

    なお、将棋所で対局開始時にこの２つを必ず指定しているのは、この２つは
    使用頻度が高く、値の変更も頻繁に行われると思われるので、いちいちエン
    ジン設定ダイアログを開かなくても設定できるようにしたためです。

    USIの原案では、これ以外にも、USI_OwnBook、USI_MultiPV、
    USI_ShowCurrLine、USI_ShowRefutations、USI_LimitStrength、
    USI_Strength、USI_AnalyseModeという名前のオプションが予約されていま
    す。（詳しくは原案を読んで下さい。）
    ただし、将棋所では、これらのオプションを設定することはありません。

    オプションの種類は以下の６種類があります。このオプションの種類により、
    エンジン設定ダイアログで表示されるコントロールの型が決まります。

    check

        チェックボックスを表示します。

    spin

        数値のみを入力できるコントロールを表示します。

    combo

        ポップアップメニューを表示します。

    button

        ボタンを表示します。このボタンを押すと、オプション名で指定された
        コマンドがエンジンに送られます。（オプション名がoptionnameなら、
        このボタンを押すと、setoption name optionnameというコマンドが送
        られます。）

    string

        文字列を入力できるコントロールを表示します。

    filename

        ファイル名を入力できるコントロールを表示します。ファイル名を指定
        しやすいよう、ファイル選択ボタンを表示し、それを押すと、ファイル
        選択のダイアログを表示するようになっています。ここで選択したファ
        イルの絶対パスが設定値となります。

    これらの種類を指定した後、そのデフォルト値や、入力値の範囲などを指定
    することができます。

    default <x>

        デフォルト値を指定します。種類がcheckであれば、trueまたはfalseと
        なります。種類がspinであれば数字、combo、string、filenameであれ
        ば、任意の文字列になります。

        なお、stringまたはfilenameでデフォルト値が空の文字列の場合は
        <empty>を指定して下さい。（emptyの両側に不等号の記号が必要です。）

    min <x>
    max <x>

        種類がspinである場合、その値の下限値と上限値を指定します。

    var <x1> var <x2> ...

        種類がcomboの場合、選択できる文字列を追加します。

    以下に、optionコマンドの使用例を示します。

    // オプション名がUseBook、種類がcheck、デフォルト値がtrueであれば
    option name UseBook type check default true

    // オプション名がSelectivity、種類がspin、デフォルト値が２で、
    // 選択可能な値が０から４までなら
    option name Selectivity type spin default 2 min 0 max 4

    // オプション名がStyle、種類がcombo、デフォルト値がNormalで、
    // 選択可能な文字列がSolid、Normal、Riskyの３つであるなら
    option name Style type combo default Normal var Solid var Normal var Risky

    // オプション名がResetLearning、種類がbuttonなら
    option name ResetLearning type button

    // オプション名がBookFile、種類がstring、デフォルト値がpublic.binなら
    option name BookFile type string default public.bin

    // オプション名がLearningFile、種類がfiliename、デフォルト値が空なら
    option name LearningFile type filename default <empty>

checkmate [<move1> ... <movei> | notimplemented | timeout | nomate]

    checkmateというコマンドはUSIの原案にはありませんが、GUIからgo mateを
    送られて詰将棋解答を開始したあと、その結果を返すためのコマンドとして
    追加しました。checkmateのオプションは以下の通りになります。

    notimplemented

        詰将棋解答機能に対応していないエンジンの場合、go mateに対しては
        checkmate notimplementedを返します。

    timeout

        制限時間ありで詰将棋解答を開始した場合、制限時間内に結論が出なけ
        れば、checkmate timeoutを返します。

    nomate

        詰将棋を解いて、「この問題は詰まない」という結論が出たら、
        checkmate nomateを返します。

    詰将棋を解いて、その問題が詰むのであれば、その手順をcheckmateのあと
    に続けて書きます。例えば、

    checkmate G*8f 9f9g 8f8g 9g9h 8g8h

    というようになります。詰将棋解答時の全体の流れについては、後述する
    「詰将棋解答における通信の具体例」の項目を参考にして下さい。

    なお、「詰将棋解答機能だけに対応して、通常の対局に対応していない」と
    いうエンジンを作った場合は、（go mateでない）通常のgoコマンドに対し
    てはbestmove resignを返すようにしておいて下さい。間違ってそのエンジ
    ンで対局を開始してもすぐに対局が終わるので、そのエンジンでは対局でき
    ないことがわかります。


対局における通信の具体例

以下に、実際の通信の具体例を示します。特に、思考開始と指し手について解説
します。なお、GUIがエンジンに対して送るコマンドの前には">"を、エンジンが
GUIに対して送るコマンドの前には"<"をつけています。エンジン起動から対局開
始まで

// エンジン起動
>usi

// usiコマンドに対する返答（例）
<id name Lesserkai
<id authoer Program Writer
<option name BookFile type string default public.bin
<option name UseBook type check default true
<usiok

// 対局開始前のオプション設定（例）
>setoption name USI_Ponder value true
>setoption name USI_Hash value 32
>setoption name BookFile value public.bin
>setoption name UseBook value true

// 対局開始前の準備
>isready
<readyok

// 対局開始
>usinewgame

指し手のやり取り

最も重要な部分である、指し手の部分について説明します。（なお、以下の例で、
goコマンドのオプションである持ち時間指定部分は省略しています。）

まず、GUIはエンジンに対し、positionコマンドで現在局面を送り、それに続け
てgoコマンドを送って思考開始を命令します。エンジンが後手で、先手が平手初
期局面から７七歩と指した局面であれば、

>position startpos moves 7g7f
>go

それに対しエンジンは、思考したあと、bestmoveコマンドで指し手を返します。
先読みしないのであれば、エンジンの指し手だけを返します。

<bestmove 3c3d

なおエンジンは、goを受信してからbestmoveを返すまでの間に、infoコマンドで
思考内容を送ってGUIに表示させることができます。（この例では省略していま
す。）

次に、先読み機能を説明します。
エンジンが後手で、先手が平手初期局面から１六歩と指した局面であれば

>position startpos moves 1g1f
>go

エンジンはbestmoveコマンドで指し手を返しますが、この時に先読み要求を出す
ことができます。エンジンの指し手が4a3bで、それに対する相手の指し手を6i7h
と予想したのであれば

<bestmove 4a3b ponder 6i7h

GUIはこれを受信すると、すぐにpositionコマンドで思考開始局面を送ります。
この局面は、現在局面に、エンジンが予想した相手の指し手（この場合は6i7h）
を追加したものになります。それに続けてgo ponderコマンドを送ります。

>position startpos moves 1g1f 4a3b 6i7h
>go ponder

エンジンはこれを受信すると先読みを開始します。goコマンドの解説にも書きま
したが、go ponderによって先読みを開始した場合、次にGUIからstopまたは
ponderhitが送られてくるまで、エンジンはbestmoveを返してはいけません。相
手が次の手を指す前に思考が終わったとしても、GUIからstopまたはponderhitが
送られてくるまで待つことになります。

やがて、相手が手を指します。その手がエンジンの予想手と一致した場合と、そ
うでない場合で動作が異なります。

エンジンの予想手が外れた場合

この場合、GUIはエンジンにstopを送ります。

>stop

エンジンはこれに対し、思考中ならすぐに思考を打ち切って、現時点で最善と考
えている手をbestmoveで返します。既に思考が終わっていたなら、探索済みの指
し手をbestmoveで返します。（bestmoveのあとにponderで相手の予想手を追加し
ても構いませんが、いずれにしろ無視されます。）

<bestmove 6a5b ponder 4i5h

この、stopに対してbestmoveで返された指し手は、外れた予想手（この場合は
6i7h）に対する指し手なので、GUIはこの内容を無視して、正しい相手の指し手
（現在局面）を送ります。続けてgoコマンドも送ります。相手が7g7fと指したの
であれば

>position startpos moves 1g1f 4a3b 7g7f
>go

エンジンはこれによって通常の思考を開始します。

エンジンの予想手が当たった場合

この場合、GUIはエンジンにponderhitを送ります。

>ponderhit

予想手が当たったので、エンジンは引き続き思考を継続して構いません。既に思
考が終わっていたら、すぐにその指し手を返すこともできます。bestmoveで指し
手を返すとき、前回と同様にponderを追加して先読み要求を出すこともできます。

<bestmove 6a5b ponder 4i5h

以下、同様にして対局が継続されます。

対局終了

エンジンは、自分の指し手のとき、bestmove resignを送ることで投了すること
ができます。また、相手の指し手によって詰まされてしまった場合は、必ず
bestmove resignを返すようにしてください。

<bestmove resign

対局終了を確認すると、GUIはエンジンにgameoverコマンドを送ります。エンジ
ンが勝った場合はgameover win、負けた場合はgameover loseを送ります。千日
手が発生した場合は、gameover drawを送ります。

>gameover lose

エンジンはこれで対局状態を終了し、次の対局待ち状態になります。

詰将棋解答における通信の具体例

詰将棋解答についても、全体の流れとしては対局時とほとんど同じです。エンジ
ン起動から解答準備に入るまでのコマンドのやり取りは、USI_Ponderの設定をし
ないことを除けば、通常の対局時と同じです。（対局ではないので、usinewgame
とか不要に思われるかもしれませんが、対局時と同じような流れにした方がエン
ジンの詰将棋対応をやりやすいと思ったので、あえて同じようにしてあります。）

// エンジン起動
>usi

// usiコマンドに対する返答（例）
<id name Lesserkai
<id authoer Program Writer
<option name BookFile type string default public.bin
<option name UseBook type check default true
<usiok

// 詰将棋解答開始前のオプション設定（例）
>setoption name USI_Hash value 32
>setoption name BookFile value public.bin
>setoption name UseBook value true

// 詰将棋解答開始前の準備
>isready
<readyok

// 詰将棋解答開始
>usinewgame

問題と解答のやり取り

次にGUIは問題局面を送って詰将棋解答の開始をエンジンに命令し、エンジンは
解答を返します。この部分のやり取りも通常の対局時と似ています。通常の対局
時にはGUIがgoを送ってエンジンが思考を開始し、エンジンはbestmoveで指し手
を返しますが、詰将棋解答時はgoの代わりにgo mateを送ってエンジンが思考を
開始し、エンジンはbestmoveの代わりにcheckmateを返す、ということになりま
す。

まずGUIはpositionで問題の局面を送ります。例えば、

>position sfen 9/9/9/9/9/k8/9/9/1R2K4 b Gr2b3g4s4n4l18p 1

positionに続けてgo mateコマンドを送ります。時間無制限で解かせるのなら、

>go mate infinite

これでエンジンは思考を開始し、checkmateコマンドを返します。

<checkmate G*8f 9f9g 8f8g 9g9h 8g8h

なお、go mateを受信してからcheckmateを返すまでの間、エンジンはinfoコマン
ドを使って思考内容を返すことができます。

エンジンはcheckmateを返したら次の問題待ちになります。そして、また
positionとgo mateが送られてきたら、次の問題の解答を開始することになりま
す。

USIに追加されたコマンド

既に説明しましたが、USIの原案にないコマンドで、USIに新しく追加されたコマ
ンドなどについてまとめます。

GUIからエンジンに送るコマンド

    gameover
    goのオプションとしてbyoyomi
    また、追加ではありませんが、go mateのパラメータを原案から変更してい
    ます。

エンジンからGUIに送るコマンド

    bestmoveのパラメータとしてresignとwin
    checkmate
    USIの原案のうち、未対応のコマンド

将棋所では、USIの原案にあるコマンドのうち、次のコマンドなどに未対応です。
今後の対応も未定です。

GUIからエンジンに送るコマンド

    debug
    register
    goのオプションのうち、searchmoves, binc, wtinc, movestogo, depth, 
    nodes, movetime

エンジンからGUIに送るコマンド

    registration
    infoのサブコマンドのうち、multipv, currmovenumber, cpuload, 
    refutation, currline
    infoのscoreサブコマンドに追加されるオプションのうち、lowerbound, 
    upperbound
