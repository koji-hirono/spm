MODE
-----
1. 検討モード
2. プレイモード
3. 局面編集モード

よく上記のようなモードがあるが、そもそも2と3は不要かもしれない。
2は1をスクリプト化すればよい。
3は最悪チャンクによる検索ができればよい。HITしなかった場合は、
その局面までの手順を入力する。

ブランチングとデータベース
---------------------------

異なる手順でも同じ局面になることがあるため、本質的には、
ツリーではなく、DAG(有向非巡回グラフ Directed Acyclic Graph)となる。

バージョン管理ツールのように、trunkからcloneさせると分岐が発生。
mergeすると分岐が削除される。mergeはどちらかのラインを継承することを
意図しているため、DAGより狭い定義になる。

棋譜のブランチと考えてしまうと、ノードが指し手となるが、これは適切ではない。
指し手は文脈に依存するため、これまでの手順が異なれば、別の局面となってしまう。
ノードは、局面のスナップショットとするべきである。

局面のスナップショットを表現する手段としては、SFENがある。
(この場合、最後のMove countは不要。これがあるとDAGにならない)
SFENの場合だと、データ長は可変だ。
圧縮率と処理速度が問題となる。
チェスで使われる内部表現としてはBitboardがある。
持ち駒の表現は別途考える必要がある。

spmでは、Board構造体が該当する。

32bitCPU の場合:

| Type | Type Size(byte) | Count | Size(byte) |
|:-----|----------------:|------:|-----------:|
| int* |                4|      9|          36|
| int  |                4|     81|         324|
| int  |                4|  2 * 9|          72|
| total|                 |       |         432|


種類      9 (4bit) # +1 駒がないところの情報も必要。
先・後    2 (1bit)
成・不成  2 (1bit)
-------------------
             6bit

数/種類  14 (4bit)
手番      2 (1bit)

9 x 9 x 6bit => 486bit
8 x 4bit => 32bit

519bit (64byte + 1bit)

9x9=81マスだが、全部の駒数は40である。
種類という意味では8種類。属性として先・後、成・不成がある。
また局面にも、手番がある。
盤をベースにするのか、駒の位置と属性を保持するのか。
盤をベースにする場合、持ち駒の部分の長さを可変とするか固定とするかが難しい。
駒をベースとする場合、サイズは固定となるだろう。

位置情報 9 x 9 + 2 = 83 (7bit) # +2は駒台か、存在しないか
先・後                2 (1bit)
成・不成              2 (1bit)
------------------------------
                         9bit

手番                  2 (1bit)

(40 x 9bit) + 1bit
  => 361bit  (45byte + 1bit)

46byte

盤位置を独立させると56byteとなる。

盤・駒台・なし          3 (2bit)
盤位置         9 x 9 = 81 (7bit)
先・後                  2 (1bit)
成・不成                2 (1bit)
---------------------------------
                          11bit

手番                  2 (1bit)

(40 x 11bit) + 1bit
  => 441bit  (55byte + 1bit)

56byte

64bit整数ならば  7個
32bit整数ならば 14個

成・不成も種類によっては不要なものがある。
種類の方に成・不成りも含めてしまう(8 + 6 = 14)と、
駒の種類1つあたり8bit(1byte)で表現可能となる。
ただし、成・不成りが2つ存在することはないので無駄が生じる。
成・不成が存在しない駒の場合(4個)は8bitとする方法も考えられる。

存在しない(駒落ち)場合は、先・後、成・不成も不要となる。

(4 x 8bit) + (36 x 9bit) + 1bit
  => 32 + 324 + 1
  => 357bit (<45byte)

本当に10^220なのか? これは棋譜のことだろう。

計算すると局面の数は 2^357 = 2.93567823 * 10^107 となる。

当然、同じ位置に駒があったり、二歩だったり、おかしな配置も含まれる。
このあたりを削っていくともっと少なくなる。

矜羯羅(こんがら) 10^112
「矜羯羅」は、サンスクリットでの疑問詞の「矜」と、
「作為」の意味である「羯羅」を合わせたもので、
「何をするべきかを問い、その命令の通りに動く」という意味になる。
これだったら面白かったのに。

10^60 - 10^70 というのが結論

2^10 ~= 10^3

2^200 - 2^230 くらい

230bit ~= 29byte くらい

1つの局面の情報量は30文字程度ということになる。


局面ペディアでの集録局面数は 11,733,967 => 10^7
約11メガ

網羅率は 10^-51 から 10^-61 %
もはや感覚がわからない。

盤上に駒が少ない場合、SFENの方が短くなる場合がある。

         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890
9/9/9/9/9/k8/9/9/1R2K4 b Gr2b3g4s4n4l18p
lnsgkgsn1/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w -
8l/1l+R2P3/p2pBG1pp/kps1p4/Nn1P2G2/P1P1P2PP/1PS6/1KSG3+r1/LN2+p3L w Sbgn3p

局面が複雑になってくるとだいたい70byte程度になるものと思われる。
成駒が増えると長くなるだろう。

pos     ::= col row | '_' | ' '
col     ::= '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
row     ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'
promote ::= '+' | empty
side    ::= 'B' | 'W'

Trun  = B
P[18] = B1a, W2b+, ...
L[4]
N[4]
B[2]  = B_, ' '
R[2]
S[4]
G[4]
K[2]

それぞれの駒に特有のindexを割り振っていることになるので、
同じ局面でもindexが異なることで別局面のように見えてしまう問題がある。
memcmpによる単純な値の一致では判定できない。
圧縮効率はよいが一意性が問題。
一意性を保つにはあるルールに基づいて順番に並べる必要がある。
位置の小さい方から並べる。


最短で45byteであるが、4の倍数か8の倍数の方が都合がよい。
48byteとするのが無難そうである。

64bit整数ならば  6個
32bit整数ならば 12個

割り当て:

   0: 局面全体
1-47: 駒1つあたり9bit


中将棋の場合、持ち駒がないのでチェスに似た構造となる。

盤位置      12 x 12 = 144 (8bit)
先・後                  2 (1bit)
成・不成                2 (1bit)
---------------------------------
                          10bit
駒の種類 21
駒の総数 92

92 x 10bit + 1bit = 921bit (115byte + 1bit)

チャンクやテンプレートが表現できるか?
--------------------------------------

* value/mask方式
  -> 2個持てば済むので簡単。
  -> 複雑なパターンマッチングはできない。

* 正規表現のようなもの
  絶対位置ではなく相対位置の方が都合がよい。
  picのように文脈には依存するが、オブジェクトの位置関係によって
  絶対位置が定まる方式が柔軟かも知れない。
  特に玉の位置からの相対的関係を記述するとよさそう。
  情報の圧縮効率よりも、むしろ表現力を重視した方がよさそう。
  フォーマットは全く異なるのが自然。

        k g s n l
        k left g s n l
        left.n up b
        right.n up r
        up p x 9

  検索が目的ではあるが、ChessにはCQLというものが用意されている。

局面と局面のリンク関係
-----------------------


局面に附属する情報
-------------------
* 手合割 平手
* 戦型
* 現在の結論
* 評価値平均
* 該当する棋譜
* 類似局面

動作するにあたって必須ではないが、あると便利なもの。
手番は必須なので、附属ではない。


指し手の評価
-------------
* 指し手
* 消費時間
* 評価値 (対局時/解析時)
* 形成判断 (互角 < 有利 < 優勢 < 勝勢)
* 指し手評価 (エンジンと一致: ○  評価値の下落が大きい: 疑問手? 悪手?)


エンジンとの一致率
* 先手・後手
* 一致率 %
* 一致した指し手/全ての指し手

思考
---------
* エキスパートのチェスプレイヤーと同等の振る舞いをするには、
  10,000 - 100,000のチャンクが必要。
* 囲碁では、局面を「言葉であらわす抽象的な表現」と
  「具体的な石の配置」を組み合わせたパターンの両方でとらえる。
* 将棋での局面記憶実験

  平均記憶時間(秒)

                  20  30  40  50  60
  -------------  --- --- --- --- ---
  初級 アマ8級   180 180 200 280 280
  中級 アマ三段   30  40  40  80  90
  上級 プロ八段   10  15  15  17  20

* エキスパートは局面を記憶するのに6秒
  駒を記憶するのではなく盤面全体を記憶しているよう。
  見ていない部分の駒の配置を知識から補って再生している。

* 再生の方法
  初級 端から並べる
  中級 いくつかのかたまりごとに再現する
       -> 部分的なチャンクを手掛かりにしている。
       -> 50手過ぎたあたりから記憶時間が長くなるのは、
          典型的な駒組みから崩れてきているため。
  上級 並べる順番は特にない。
       局面のポイントとなる駒の位置を先に決め、
       他の駒は記憶の中の知識と照らし合わせておいていく。
       -> 局面全体を1つの意味あるパターンとして記憶している。

* 上級者は必ずしも戦型や囲いという単位で見ていない。

* 3秒制限での再生率

  平均再生率(%)

                  20  30  40  50  60
  -------------  --- --- --- --- ---
  初級 アマ8級    65  61  51  50  48
  中級 アマ三段   96  99  94  68  69
  上級 プロ八段   98  99  95  92  90

* ランダム局面での再生率

                  20  30  40  50  60
  -------------  --- --- --- --- ---
  初級 アマ8級    49  49  46  42  38
  中級 アマ三段   49  49  46  49  39
  上級 プロ八段   54  50  50  46  49

* 局面を記憶するためにおよその駒の配置と、ポイントとなる7±4個の駒の
  正確な位置が分かれば、全体の駒の配置が推察できる。
  例) 先手の飛、角、銀の位置を見ることで、先手四間飛車の序盤の駒組み
      であることが分かる。
      後手の5三銀と先手の4六歩を確認するだけで、
      後は見なくてもほぼ駒の配置は記憶できると考えられる。

  これは、いわゆる形態論か

* 上級者は、終盤局面も「将棋の局面という点では一緒」と考えており、
  記憶しにくいということはない。
  静的にその局面だけからとらえているのではなく、
  その局面に至る経緯や流れなどの知識の中でとらえていると考えられる。
  -> 時間的チャンク

* 手の読み

  初級: 直接的な手しか見えない。狭く浅い。
  中級: 広くたくさん読もうとする。広く浅い。
  上級: 読む前に「感じの良い手、悪い手」の直観が働き、
        狭く深く読めるようになる。
        先読みを行わなくても、候補手に対して、良し悪しの判断がともなっている。

* 強くなっても単純に空間的配置パターンによる認識を磨くだけではダメ。
  深い正確な読みを磨く必要がある。

* 2003年現在のコンピュータ将棋の方向性は、広く深く読む探索の効率化が多い。
  局面の静的評価より探索重視が多い。ある局面で十数通りの候補手から
  7～15手ぐらいの先読みを行って、次の一手を決定するのが主流。
  広い読みは行っておらず、せいぜい3～5通りぐらいの候補手を直線的に先読みして
  評価を行っている。

* 2005年現在のコンピュータ将棋は、合法手48手をすべて検討し、
  次の一手を決定するまでに、数百万もの局面を探索する。
  一方で、熟達者は分岐はせいぜい3手以内で、深くても30手前後の直線的な先読み。

* 熟達者の序盤
  個々に自分の得意とする戦型をいくつか持っている。
  その戦型をくみ上げるための指し手系列を持っている。
  相手の指し手を観察することで、相手の意図を察知し、
  自分のくみ上げるべき戦型を適宜変化させて対応させていく。

* 熟達者の中盤
  1.「流れ」の知識から駒の価値や、効率に関する評価値を変化させる。
  2. 局面を形としてとらえて、経験的な知識からもっともらしい候補手を
     数手(3手前後)思い浮かべる。
  3. 最も「感触の良い手」を中心に「直線的先読み」を行う。
  4. 総合的に判断して「次の一手」を決定する。


データの形式
-------------
Notationというのはあくまでも記法のことである。

2つの形式A, Bがあったとして、その2つは表現が異なるだけで、
その意味するところが同じなのであれば、等価変換可能である。
BtoA(AtoB(Data)) = Data である。

しかし、片方の形式にしかない情報があるのだとすれば、
変換によって情報が失われる。もしくは変換後の情報が足りず不完全となる。
A∩B の部分しか情報が残らない。

従って、2つの形式変換のソフトウェアを多数作るのではなく、
すべての情報を包含したデータ交換のための形式を定義し、
そのデータ交換用の形式を中心として、形式変換を行う。

データ交換用の形式を定義するにあたって、

1. まず、このドメインにおいて必要な情報とは何かを定義する。
   -> 存在するすべての形式が保有可能である情報の和集合を取る。
2. その情報を表現するための記法(表現形式)を定義する。

すべての形式を包含する情報の定義に失敗すると、
様々な形式がある中の一形式に成り下がるので注意が必要である。

完全なものを最初から定義するのは難しい。よって、段階的に拡張する戦略を取る。
これは、バージョン間の互換性を考慮して設計しなければならない。
大きな技術革新が起きると、バージョン間の互換性がなくなりやすい。

主にデータの交換を目的とする形式ではあるが、
データの保存形式として利用することも可能である。

その場合の要求として、

* 古いバージョンのみサポートするソフトウェアに対して、
  新しいバージョンのデータが入力されるとき、
  拡張部分は無視されること。

* 新しいバージョンをサポートするソフトウェアに対して、
  古いバージョンのデータが入力されるとき、
  古い形式に従って処理されること。
  可能であれば、古いバージョンのデータには単純に拡張された部分がないだけで、
  ソフトウェア側でバージョンの違いによる特別な分岐処理は行わないのが望ましい。


で、CSAはこれの位置付けなのだが、範囲が日本に限定されている点が残念である。
特にこれがやっかい。「文字コードと改行コードは、使用するOSや環境に依存する。」
また、SGFやUSFのようにブランチングがない。

参考文献
---------

* PGN(Portable Game Notation)
  2手一組という指し手はChessに特化しているという、
  名前の割には汎用性がないフォーマット
  http://pgn4web.googlecode.com/svn/wiki/pgn-standard.txt

* PSN(Portable Shogi Notation)
  PlayOKでも使用されているフォーマット
  http://genedavis.com/articles/2014/05/09/psn/
  PGNに近い。日本語はあつかえない。

* USF(Universal Shogi Format)
  BCMShogiの作者が提唱
  http://home.arcor.de/Bernhard.Maerz/BCMGames/USF.htm

* SGF(Smart Game Format)
  http://www.red-bean.com/sgf/
  ブランチングに対応するため、木構造になっている。
  最新のバージョンは4
  主なドメインは碁

* BJD(Bonanza ...)
  BFE(Bonanza Fronto-End)で使用可能な形式

* KIF
* KI2
  柿木将棋のフォーマット
  KI2は1行に6手表示

* kj2
* kj3
  柿木定跡ファイル

* CSA
  http://www.computer-shogi.org/protocol/record_v21.html


* FEN(Forsyth-Edwards Notation)
* Shredder-FEN(Shredder Forsyth-Edwards Notation)
  Chess960のランダム配置によるキャスリング表記を改良したもの。
  AHahと抽象的な表現で対応。
* X-FEN(extension of Forsyth-Edwards Notation)
  名前がX-MENみたいだ。
  キャスリングとアンパサンの部分を改良したもの。

* SFEN(Forsyth-Edwards notation for shogi)

* EPD(Extended Position Description)
  いろんな変則ルールのあるチェスバリアントにとっては、FENより良いらしい。

* BOD
  kif形式で使用される局面図(テキスト)

* Chess diagram template format
  WikipediaでChessボードを表現するためのテンプレート形式
  ShogiではBODみたいなもの。

* FEN2Wikipedia
  FENからWikipediaの形式に変換するツール

* CQL(Chess Query Language)
  http://www.rbnn.com/cql/

* YaYaSQL(Yet Another Yet Another Shogi Query Language)

* Chess Engine Communication Protocol
  WinBoard/XBoard Protocol
  http://www.open-aurec.com/wbforum/WinBoard/engine-intf.html
  http://home.hccnet.nl/h.g.muller/interfacing.txt

* USI2WB
  http://home.hccnet.nl/h.g.muller/shokidoki.html
  Universal Shogi Protocol
  ->
  WinBoard Protocol
  author: h.g.muller

* SAN(Standard Algebraic Notation)
  e.g, e4, Nf3, O-O cxb5, P@f7
  省略系の記法

* 5x5shogi
  http://hgm.nubati.net/miniShogi.html

* HIT(Human Intutitive Thought)
  人間の直観的思考をコンピュータに組み込むプロジェクト
  伊藤毅志
  https://ipsj.ixsq.nii.ac.jp/ej/index.php?action=pages_view_main&active_action=repository_action_common_download&item_id=10618&item_no=1&attribute_id=1&file_no=1&page_id=13&block_id=8

* KIDS(Knowledge Intuitive Description System)
  熟達者が自分で直接知識を記述して、記述した知識を反映したプレーを
  実行するシステム
  伊藤毅志
  HITが困難になってきたのでできたプロジェクト
  1) 熟達者は、熟達するほど持っている知識が「無意識化」してしまい、
     自分でもどんな知識を使って、手を生成しているのかがわからなくなってしまう。
     従って、熟達者の知識を抽出すること自体が困難となる。
  2) 一方で、HITで記述した知識も膨大になり、
     HITが生成した手もどんなルールに基づいて選ばれたのかがわかりにくく、
     デバックが難しい。

* shogi-game
  http://code.google.com/p/shogi-game/
  Yet another shogi
  marho
  ロシア人?

* shogitools
  https://code.google.com/p/shogitools
  Fat Bold Cyclop
  JavaやPythonのツールがある模様

* http://www.shogi-lab.net
  Adam Szlachta

* ごたくを並べて反省会
  http://www.forest.impress.co.jp/docs/review/20140423_645662.html
  も氏
  bonanzaを実行するのではなく、fv.binを利用して検討している模様。

* K-Shogi
  http://www.vector.co.jp/soft/winnt/game/se193871.html
  http://www.forest.impress.co.jp/article/2007/07/31/kshogi.html
  STUDIO-K PONTA
  http://www.studiok-i.net/
